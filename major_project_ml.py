# -*- coding: utf-8 -*-
"""MAJOR PROJECT ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nrc6vhI8iX63bu-lVVpbYtYDGGKU8AGI
"""

import pandas as pd
wthr=pd.read_csv('delhi.csv', index_col='date_time')
wthr

"""Cleaning the data

"""

wthr.apply(pd.isnull).sum()/wthr.shape[0]

core=wthr[['maxtempC','mintempC','uvIndex.1','DewPointC','HeatIndexC','WindChillC','cloudcover','humidity','tempC','windspeedKmph']]
core.columns=['maxtempC','mintempC','uvIndex','DewPointC','HeatIndexC','WindChillC','cloudcover','humidity','tempC','windspeedKmph']
core

"""filling missing values"""

core.apply(pd.isnull).sum()/core.shape[0]

"""verifying datatypes"""

core.dtypes

core.index

core.index=pd.to_datetime(core.index)
core.index

core.index.year

core.index.month

core.index.date

core.index.time

"""analyzing the weather data"""

core[['maxtempC','mintempC']].plot()

core[['WindChillC','DewPointC']].plot()

core[['cloudcover']].plot()

core[['humidity']].plot()

core[['uvIndex']].plot()

core[['HeatIndexC']].plot()

core[['windspeedKmph']].plot()

"""training ML model"""

core["target"]=core.shift(-1)["maxtempC"]
core

core=core.iloc[:-1,:].copy()

core

from sklearn.linear_model import Ridge
reg=Ridge(alpha=.1)

predictors=["maxtempC","mintempC",'uvIndex','DewPointC','HeatIndexC','WindChillC','cloudcover','humidity','tempC','windspeedKmph']

trning=core.loc[:"2015-01-01"]

tsting=core.loc["2019-01-01":]

print (tsting)

reg.fit(trning[predictors],trning["target"])

predictions = reg.predict(tsting[predictors])

from sklearn.metrics import mean_absolute_error

mean_absolute_error(tsting["target"],predictions)

combined=pd.concat([tsting["target"],pd.Series(predictions, index=tsting.index)], axis=1)
combined.columns=["actual","predictions"]
combined

combined.plot()

reg.coef_

"""creating a func to make predictions"""

def create_predictions(predictors,core,reg):
  trning=core.loc[:"2015-01-01"]
  tsting=core.loc["2019-01-01":]
  reg.fit(trning[predictors],trning["target"])
  predictions = reg.predict(tsting[predictors])
  error=mean_absolute_error(tsting["target"],predictions)
  combined=pd.concat([tsting["target"],pd.Series(predictions, index=tsting.index)], axis=1)
  combined.columns=["actual","predictions"]
  return error,combined

create_predictions(predictors,core,reg)

print(predictions)